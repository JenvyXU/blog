概述
用户开发特定业务的处理函数，托管给函数平台，按需使用相关的后端服务，通过特定条件的触发完成开发者业务逻辑函数的计算。
用户无需为应用持续付费，只需支付函数运行时产生的资源消耗费用，而这，就是 Serverless 服务的模型

组成
Serverless 架构由两部分组成，即 Faas 和 BaaS。
FaaS（Function-as-a-Service）即为函数运行平台，用户无需搭建庞大的服务系统，只需要上传自己的逻辑函数如一些定时任务、
数据处理任务等到云函数平台，配置执行条件触发器、路由等等，完成基础函数的注册。
BaaS（Backend-as-a-Service）包含了后端服务组件，它是基于 API 的第三方服务，用于实现应用程序中的核心功能，
包含常用的数据库、对象存储、消息队列、日志服务等等。

执行流程
Serverless 其实是通过事件驱动的，当一个任务被触发时，比如 HTTP 请求，API Gateway 接受请求、解析和认证
传递对应参数给云函数平台，平台中执行对应回调函数，配合 DB、MQ 等 BaaS 服务在特定容器中完成计算，最终将结果返回给用户
函数执行完成后，一般会被 FaaS 平台销毁，释放对应容器，等待下一个函数运行

优缺点
1.云厂商强绑定 当你决定使用公有云的 Serverless 产品时，它们常常会和厂商的其他云产品相绑定，如对象存储、消息等等，这意味你需要同时开通其他的服务，将导致你的应用与平台强绑定，迁移成本剧增。
2.不适合长时间任务 云函数平台会限制函数执行时间，如阿里云 Function Compute 最大执行时长为 10
3.min，如果你的任务时间超长，那么你需要拆分编排你的函数执行流程，并在一个函数执行结束时唤起另一个函数执行。这将增加编码的复杂度，而且花费上可能高于购买一个长时间运行的实例。
4.冷启动时间 函数运行时，执行容器和环境需要一个准备的时间，尤其是第一次启动时时间可能会较长。对一个 HTTP 请求来讲，可能会带来响应时延的增加，产生性能毛刺。
5.调试与测试 由于本地环境和平台运行环境的差异性，开发者需要不断调整代码，打印日志，并提交到函数平台运行测试，会带来一些开发成本和产生一些费用。


应用场景
1.定时任务 通过时间触发对应的函数任务，完成开发者业务逻辑的处理。
2.数据加工 通过事驱动件机制，在特定的条件下触发，对系统的日志进行整合，或者对多媒体文件进行加工等等。
3.低频请求 用户可以按照频次付费，而无需构建一个应用来应对这些必要的但是量小的请求。
4.IoT 物联网场景下，大部分是用户对设备的操控，用户对时延的容忍度较高，也是典型的事件触发且低频场景。
5.认知计算 适用于某些 AI 场景，如聊天机器人。

限制
1.Web服务必须支持第三方身份认证服务器，所以使用无服务的方式，就会依赖第三方服务
2.日志的记录必须由每个支撑应用的不同Web服务来实现，日志格式跟大部分应用服务器日志都不同，记录的数据也很可能不是你熟悉的
3.需要假设有些恶意用户可能会在浏览器中劫持证书而使用该证书授权的Web服务，使用无服务时不能把浏览器中的应用验证逻辑和安全验证逻辑放在一起，必须分开实现
4.假设某个用户提交的数据包含未验证的信息，可以使用户只能写入他们自己可以读取的数据，还可以将某些写操作委托给自定义Web服务，比如使用Lambda函数来进行验证，并以一种安全的方式写入数据
5.用户资料会保存在一个独立访问的数据存储服务中，一些在数据库中处理用户数据的方法（id关联user）表就没办法实现
6.失去对所有请求路由到统一的中间层中间的控制
7.需要料及服务的定价策略及当用户增加时这些价格的变化
